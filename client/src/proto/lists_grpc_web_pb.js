/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: src/proto/lists.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./lists_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ProductsServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ProductsServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.AllListItems>}
 */
const methodDescriptor_ProductsService_GetAll = new grpc.web.MethodDescriptor(
  '/ProductsService/GetAll',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.AllListItems,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.AllListItems.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.AllListItems)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.AllListItems>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.getAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/GetAll',
      request,
      metadata || {},
      methodDescriptor_ProductsService_GetAll,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.AllListItems>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/GetAll',
      request,
      metadata || {},
      methodDescriptor_ProductsService_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListItemId,
 *   !proto.ListItem>}
 */
const methodDescriptor_ProductsService_GetById = new grpc.web.MethodDescriptor(
  '/ProductsService/GetById',
  grpc.web.MethodType.UNARY,
  proto.ListItemId,
  proto.ListItem,
  /**
   * @param {!proto.ListItemId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListItem.deserializeBinary
);


/**
 * @param {!proto.ListItemId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListItem)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListItem>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.getById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/GetById',
      request,
      metadata || {},
      methodDescriptor_ProductsService_GetById,
      callback);
};


/**
 * @param {!proto.ListItemId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListItem>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.getById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/GetById',
      request,
      metadata || {},
      methodDescriptor_ProductsService_GetById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Product,
 *   !proto.Product>}
 */
const methodDescriptor_ProductsService_InsertProduct = new grpc.web.MethodDescriptor(
  '/ProductsService/InsertProduct',
  grpc.web.MethodType.UNARY,
  proto.Product,
  proto.Product,
  /**
   * @param {!proto.Product} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Product.deserializeBinary
);


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Product)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Product>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.insertProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/InsertProduct',
      request,
      metadata || {},
      methodDescriptor_ProductsService_InsertProduct,
      callback);
};


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Product>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.insertProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/InsertProduct',
      request,
      metadata || {},
      methodDescriptor_ProductsService_InsertProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListItem,
 *   !proto.ListItem>}
 */
const methodDescriptor_ProductsService_InsertList = new grpc.web.MethodDescriptor(
  '/ProductsService/InsertList',
  grpc.web.MethodType.UNARY,
  proto.ListItem,
  proto.ListItem,
  /**
   * @param {!proto.ListItem} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListItem.deserializeBinary
);


/**
 * @param {!proto.ListItem} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListItem)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListItem>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.insertList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/InsertList',
      request,
      metadata || {},
      methodDescriptor_ProductsService_InsertList,
      callback);
};


/**
 * @param {!proto.ListItem} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListItem>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.insertList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/InsertList',
      request,
      metadata || {},
      methodDescriptor_ProductsService_InsertList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Product,
 *   !proto.Product>}
 */
const methodDescriptor_ProductsService_UpdateProduct = new grpc.web.MethodDescriptor(
  '/ProductsService/UpdateProduct',
  grpc.web.MethodType.UNARY,
  proto.Product,
  proto.Product,
  /**
   * @param {!proto.Product} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Product.deserializeBinary
);


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Product)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Product>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.updateProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/UpdateProduct',
      request,
      metadata || {},
      methodDescriptor_ProductsService_UpdateProduct,
      callback);
};


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Product>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.updateProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/UpdateProduct',
      request,
      metadata || {},
      methodDescriptor_ProductsService_UpdateProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListItemUpdate,
 *   !proto.ListItem>}
 */
const methodDescriptor_ProductsService_UpdateList = new grpc.web.MethodDescriptor(
  '/ProductsService/UpdateList',
  grpc.web.MethodType.UNARY,
  proto.ListItemUpdate,
  proto.ListItem,
  /**
   * @param {!proto.ListItemUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListItem.deserializeBinary
);


/**
 * @param {!proto.ListItemUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListItem)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListItem>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.updateList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/UpdateList',
      request,
      metadata || {},
      methodDescriptor_ProductsService_UpdateList,
      callback);
};


/**
 * @param {!proto.ListItemUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListItem>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.updateList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/UpdateList',
      request,
      metadata || {},
      methodDescriptor_ProductsService_UpdateList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ProductId,
 *   !proto.Empty>}
 */
const methodDescriptor_ProductsService_RemoveProduct = new grpc.web.MethodDescriptor(
  '/ProductsService/RemoveProduct',
  grpc.web.MethodType.UNARY,
  proto.ProductId,
  proto.Empty,
  /**
   * @param {!proto.ProductId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.ProductId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.removeProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/RemoveProduct',
      request,
      metadata || {},
      methodDescriptor_ProductsService_RemoveProduct,
      callback);
};


/**
 * @param {!proto.ProductId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.removeProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/RemoveProduct',
      request,
      metadata || {},
      methodDescriptor_ProductsService_RemoveProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListItemId,
 *   !proto.Empty>}
 */
const methodDescriptor_ProductsService_RemoveList = new grpc.web.MethodDescriptor(
  '/ProductsService/RemoveList',
  grpc.web.MethodType.UNARY,
  proto.ListItemId,
  proto.Empty,
  /**
   * @param {!proto.ListItemId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.ListItemId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductsServiceClient.prototype.removeList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductsService/RemoveList',
      request,
      metadata || {},
      methodDescriptor_ProductsService_RemoveList,
      callback);
};


/**
 * @param {!proto.ListItemId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ProductsServicePromiseClient.prototype.removeList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductsService/RemoveList',
      request,
      metadata || {},
      methodDescriptor_ProductsService_RemoveList);
};


module.exports = proto;

